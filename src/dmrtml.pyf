!    -*- f90 -*-
!----------------------------------------------------------------------------!
!									     !
! DMRT-ML (Dense Media Radiative Transfer - Multi-Layer)		     !
! Copyright (c), all rights reserved, 2007-2011,  Ghislain Picard	     !
! email: Ghislain.Picard@ujf-grenoble.fr				     !
!									     !
! Main contributors: Ludovic Brucker, Alexandre Roy, Florent Dupont	     !
!									     !
!									     !
! Licensed under the terms of the GNU General Public License version 3:	     !
! http://www.opensource.org/licenses/gpl-3.0.html 			     !
!									     !
! dmrtml'url: http://lgge.osug.fr/~picard/dmrtml/                            !
!                                                                            !
! Recommended citation:							     !
!    G. Picard, L. Brucker, A. Roy, F. Dupont, M. Fily, and A. Royer,        !
!    Simulation of the microwave emission of multi-layered snowpacks using   !
!    the Dense Media Radiative Transfer theory: the DMRT-ML model,           !
!    Geoscientific Model Development, 6, 1061-1078, 2013                     !
!    doi:10.5194/gmd-6-1061-2013                                             !
!    http://www.geosci-model-dev.net/6/1061/2013/gmd-6-1061-2013.html        !
!									     !
!----------------------------------------------------------------------------!
!
! Note: the context of this file is case sensitive.

python module dmrtml_for ! in 
    interface  ! in :dmrt

        subroutine dmrtml_pywrapper(freq,l,n,height,density,radius,temp,tbv,tbh,mhu,tau,fwetness,medium,dist, &
     soilp_imodel,soilp_temp,soilp_eps_r,soilp_eps_i,soilp_sigma,soilp_SM,soilp_sand,soilp_clay,soilp_dm_rho,soilp_Q,soilp_N,Tbatmo,eps_ice_r,eps_ice_i)
            real*8 intent(in) :: freq
            integer intent(in) :: l
            integer intent(in) :: n
            real*8 dimension(l),intent(in) :: height
            real*8 dimension(l),intent(in),depend(l) :: density
            real*8 dimension(l),intent(in),depend(l) :: radius
            real*8 dimension(l),intent(in),depend(l) :: temp
            real*8 dimension(n),intent(out),depend(n) :: tbv
            real*8 dimension(n),intent(out),depend(n) :: tbh
            real*8 dimension(n),intent(out),depend(n) :: mhu
            real*8 dimension(l),intent(in),depend(l)  :: tau
            real*8 dimension(l),intent(in),depend(l)  :: fwetness
            character dimension(l),intent(in),depend(l) :: medium

            logical intent(in)                        :: dist
            integer intent(in)                        :: soilp_imodel
            real*8 intent(in)                         :: soilp_temp
            real*8 intent(in)                         :: soilp_eps_r
            real*8 intent(in)                         :: soilp_eps_i
            real*8 intent(in)                         :: soilp_sigma
            real*8 intent(in)                         :: soilp_SM
            real*8 intent(in)                         :: soilp_sand
            real*8 intent(in)                         :: soilp_clay
            real*8 intent(in)                         :: soilp_dm_rho
            real*8 intent(in)                         :: soilp_Q
            real*8 intent(in)                         :: soilp_N
            real*8 intent(in)                         :: Tbatmo
            real*8 intent(in)                         :: eps_ice_r,eps_ice_i

        end subroutine dmrtml_pywrapper


        subroutine albedobeta_pywrapper(freq,density,radius,temp,albedo,beta,tau,fwetness,medium,dist,grodyapproach) ! in dmrtfunc.f90
          real*8 intent(in) :: freq
          real*8 intent(in) :: density
          real*8 intent(in) :: radius
          real*8 intent(in) :: tau
          real*8 intent(in) :: fwetness
          real*8 intent(in) :: temp
          real*8 intent(out) :: albedo
          real*8 intent(out) :: beta
          real*8 intent(in) :: tau
          character intent(in) :: medium
          logical intent(in) :: dist
          logical intent(in) :: grodyapproach
        end subroutine albedobeta_pywrapper


        subroutine compute_streams_pywrapper(frequency,l,n,density,radius,temperature,&
     tau,fwetness,medium,dist,mhu,weight,ns,outmhu,ns0)
          real*8,intent(in)                              :: frequency
          integer,intent(in)                             :: l  
          integer,intent(in)                             :: n  
          real*8,intent(in),dimension(l)                 :: density
          real*8,intent(in),dimension(l),depend(l)       :: radius
          real*8,intent(in),dimension(l),depend(l)       :: temperature
          real*8,intent(in),dimension(l),depend(l)       :: tau
          real*8,intent(in),dimension(l),depend(l)       :: fwetness
          character,intent(in),dimension(l),depend(l)    :: medium
          logical,intent(in)                             :: dist 

          real*8,intent(out),dimension(n,l),depend(n,l)  :: mhu
          real*8,intent(out),dimension(n,l),depend(n,l)  :: weight
          integer,intent(out),dimension(l),depend(l)     :: ns
          real*8,intent(out),dimension(n),depend(n)      :: outmhu
          integer,intent(out)                            :: ns0
        end subroutine compute_streams_pywrapper

        subroutine icedielectric_pywrapper(frequency,temperature,eps_ice_r,eps_ice_i)
          real*8,intent(in)       :: frequency
          real*8,intent(in)       :: temperature 
          real*8,intent(out)      :: eps_ice_r
          real*8,intent(out)      :: eps_ice_i
        end subroutine icedielectric_pywrapper

        subroutine mldisort_pywrapper(l,n,depth,temp,Ke,albedo,reps,Tbatmodown, TbV,TbH,outmhu)
          integer,intent(in)                             :: l           ! number of layers
          integer,intent(in)                             :: n           ! number of stream in the most refringent layer
          real*8,intent(in),dimension(l),depend(l)       :: depth       ! depth of the layer (first is at the top)
          real*8,intent(in),dimension(l),depend(l)       :: temp        ! temperature of the layer (first is at the top)
          real*8,intent(in),dimension(l),depend(l)       :: Ke,albedo   ! effective extinction and single scatt albedo
          real*8,intent(in),dimension(l),depend(l)       :: reps         ! effective dielectric constant of the snow
          real*8,intent(out),dimension(n),depend(n)      :: TbV,TbH     ! brightness temperature
          real*8,intent(out),dimension(n),depend(n)      :: outmhu      ! cosine of the angles
          !!!!!!!!!!!!type(soilparams),intent(in)         :: soilp  ! soil parameters
          !!!!!!!!!!!!real*8,intent(in)                   :: frequency ! necessary for some soil...
          real*8,intent(in)                               :: Tbatmodown  ! atmosphere brightness temperature
        end subroutine mldisort_pywrapper
     end interface
end python module dmrtml_for

